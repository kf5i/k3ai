#!/bin/bash

#########################################
### K3ai (keÉª3ai)
### https://github.com/kf5i/k3ai
### Alessandro Festa @bringyourownai
### Gabriele Santomaggio @gsantomaggio
######################################### 

info()
{
    echo '[INFO] ' "$@"
}

infoL()
{
    echo -en '[INFO] ' "$@\n"
}

sleep_cursor()
{
 chars="/-\|"
 for (( z=0; z<7; z++ )); do
   for (( i=0; i<${#chars}; i++ )); do
    sleep 0.5
    echo -en "${chars:$i:1}" "\r"
  done
done
}


wait() 
{
status=1
infoL "Testing.." $1.$2  
while [ : ]
  do
    sleep_cursor &
    kubectl wait --for condition=available --timeout=14s deploy -l  $1   -n $2
    status=$?
    
    if [ $status -ne 0 ]
    then 
      infoL "$1 isn't ready yet. This may take a few minutes..."
      sleep_cursor
    else
      break  
    fi 
  done
}

kubeflow_install_pipelines(){
    info "Installing pipelines crd"
    export PIPELINE_VERSION=1.0.1
    kubectl apply -k "github.com/kubeflow/pipelines/manifests/kustomize/cluster-scoped-resources?ref=$PIPELINE_VERSION"
    kubectl wait --for condition=established --timeout=60s crd/applications.app.k8s.io
    sleep_cursor &
    info "Installing pipelines manifests"
    kubectl apply -k "github.com/kubeflow/pipelines/manifests/kustomize/env/platform-agnostic-pns?ref=$PIPELINE_VERSION"

    waiting_pod_array=("k8s-app=kube-dns;kube-system" 
                       "k8s-app=metrics-server;kube-system"
                       "app=traefik;kube-system"  
                       "app=minio;kubeflow"
                       "app=mysql;kubeflow"
                       "app=cache-server;kubeflow"
                       "app=ml-pipeline-persistenceagent;kubeflow"
                       "component=metadata-grpc-server;kubeflow"
                       "app=ml-pipeline-ui;kubeflow")

    for i in "${waiting_pod_array[@]}"; do 
      echo "$i"; 
      IFS=';' read -ra VALUES <<< "$i"
        wait "${VALUES[0]}" "${VALUES[1]}"
    done



    info "Kubeflow pipelines ready!!"

    info "Defining the ingress"
    sleep_cursor

    kubectl apply -f - << EOF
      apiVersion: networking.k8s.io/v1beta1
      kind: IngressClass
      metadata: 
        name: traefik-lb
      spec: 
        controller: traefik.io/ingress-controller
EOF

    kubectl apply -f - << EOF
      apiVersion: "networking.k8s.io/v1beta1"
      kind: "Ingress"
      metadata:
        name: "pipeline-ingress"
        namespace: kubeflow
        annotations:
          nginx.ingress.kubernetes.io/rewrite-target: /$2
          
      spec:
        ingressClassName: "traefik-lb"
        rules:
        - http:
            paths:
            - path: "/"
              backend:
                serviceName: "ml-pipeline-ui"
                servicePort: 80
EOF

sleep_cursor

IP=$(kubectl get service/traefik -o jsonpath='{.status.loadBalancer.ingress[0].ip}' -n kube-system)
info "pipelines UI: http://"$IP 
}

##################
INTERNAL_INSTALL_K3S_EXEC=""


k3s_install_service()
{
  info "Installing k3s service with the following parameters:" "${INSTALL_K3S_EXEC} ${INTERNAL_INSTALL_K3S_EXEC}"
  curl -sfL https://get.k3s.io | K3S_KUBECONFIG_MODE="644" INSTALL_K3S_EXEC="${INSTALL_K3S_EXEC} ${INTERNAL_INSTALL_K3S_EXEC}"  sh -s -
   export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
}

k3s_install_service_gpu()
{
  info "Installing the GPU Support on docker"
  INTERNAL_INSTALL_K3S_EXEC="--docker"  
  k3s_install_service 
  #### GPU Support
  kubectl create -f https://raw.githubusercontent.com/NVIDIA/k8s-device-plugin/v0.7.0/nvidia-device-plugin.yml
}


default_installation(){
    info "Installing pipelines"
    k3s_install_service
    kubeflow_install_pipelines
}


manage_plugin(){
 PLUGIN=$1
 PLUGIN="${PLUGIN:2}"
 info "Installing plugin: " $PLUGIN
 info "URL:" https://raw.githubusercontent.com/kf5i/k3ai-plugins/main/$PLUGIN/install
 curl -sfL https://raw.githubusercontent.com/kf5i/k3ai-plugins/main/$PLUGIN/install | bash -s -
}


manage() {
    ### DEFAULT == --cpu and --pipelines
  #  if [[ "$#" -eq 0 ]]; then
  #   kubeflow_install_pipelines
  #  fi  
    while [[ "$#" -ne 0 ]]; do
      case "$1" in
      "--pipelines")          
          kubeflow_install_pipelines  
          shift 1
          ;;
      --plugin*)
          info "Installing plugin:" "$1"
          manage_plugin  "$1"
          shift 1
          ;;
      *)
          shift 1
          ;;
      esac
    done
}




main() {
    ### DEFAULT == --cpu and --pipelines
    if [[ "$#" -eq 0 ]]; then
     default_installation
    fi  
    OR="$@"
    while [[ "$#" -ne 0 ]]; do
      case "$1" in
      "--gpu")
          k3s_install_service_gpu
          manage $OR
          shift 1
          ;;
      "--cpu")
          info "Installing the CPU Support"
          k3s_install_service
          manage $OR
          shift 1
          ;;
      "--skipk3s")
          info "Skip Installation Server"
          manage $OR
          shift 1
          ;;

      *)
          shift 1
          ;;
      esac
    done
}

main "$@"


info "K3ai setup finished"
info "k3s-uninstall.sh to uninstall"


